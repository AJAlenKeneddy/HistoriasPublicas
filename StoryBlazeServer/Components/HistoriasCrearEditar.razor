@page "/historias/crear"
@page "/historias/editar/{id:int}"

@inject HistoriaService historiaService
@inject NavigationManager navigationManager
@using StoryBlazeServer.Models
@using StoryBlazeServer.Components
@inject NavigationManager NavigationManager

@if (!string.IsNullOrEmpty(MensajeError))
{
    <div class="alert alert-danger">@MensajeError</div>
}

@if (!string.IsNullOrEmpty(MensajeExito))
{
    <div class="alert alert-success">@MensajeExito</div>
}

<h3>@(Historia.HistoriaId == 0 ? "Crear Historia" : "Editar Historia")</h3>
<EditForm Model="Historia" OnValidSubmit="GuardarHistoria">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="titulo">Título</label>
        <InputText id="titulo" class="form-control" @bind-Value="Historia.Titulo" maxlength="30" />
    </div>

    <div class="form-group">
        <label for="resumen">Resumen</label>
        <InputTextArea id="resumen" class="form-control" @bind-Value="Historia.Resumen" maxlength="40" />
    </div>

    <div class="form-group">
        <label for="estado">Estado</label>
        <InputText id="estado" class="form-control" @bind-Value="Historia.Estado" readonly="true" />
    </div>

    <div class="form-group">
        <label for="categoriaId">Categoria</label>
        <InputNumber id="categoriaId" class="form-control"
                     @bind-Value="Historia.CategoriaId"
                     readonly="@(Historia.HistoriaId != 0)" />
    </div>

    <br />
    <button type="submit" class="btn btn-primary">@((Historia.HistoriaId == 0) ? "Crear" : "Actualizar")</button>
    <button @onclick="GoBack" type="back" class="btn btn-success">Volver</button>
</EditForm>

@code {
    [Parameter]
    public int? id { get; set; }

    private Historia Historia { get; set; } = new Historia();
    private string MensajeError { get; set; } = string.Empty;
    private string MensajeExito { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Historia.Estado = "En curso";
        if (id.HasValue)
        {
            Historia = await historiaService.GetHistoriaByIdAsync(id.Value);

            if (Historia == null)
            {
                MensajeError = "La historia no fue encontrada.";
                navigationManager.NavigateTo("/MisHistorias");
            }
        }
    }

    private async Task GuardarHistoria()
    {
        MensajeError = string.Empty;
        MensajeExito = string.Empty;
        bool resultado;

        if (Historia.HistoriaId == 0)
        {
            resultado = await historiaService.AgregarHistoriaAsync(Historia);
        }
        else
        {
            resultado = await historiaService.ActualizarHistoriaAsync(Historia.HistoriaId, Historia);
        }

        if (resultado)
        {
            MensajeExito = "Operación exitosa";

        }
        else
        {
            MensajeError = "Hubo un error al guardar la historia. Verifica los permisos o intenta nuevamente.";
        }
    }
    private void GoBack()
    {
        NavigationManager.NavigateTo("javascript:history.back()");
    }
}
